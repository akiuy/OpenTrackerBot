#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ // Import libraries
import requests
import json
import os
import datetime
import asyncio
import logging
import sys
import sqlite3
import create_db
import resource.general
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    CallbackQuery
)
from dotenv import load_dotenv



#–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å .env —Ñ–∞–π–ª–∞ // Getting token from .env file
load_dotenv()
TOKEN = os.getenv("TOKEN")
router = Router()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))


class Form(StatesGroup):
  match_id = State()
  account_id = State()

#–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π // Download files with additional information
with open('resource\\dota2\\heroes.json', 'r') as heroes_json:
    heroes = json.load(heroes_json)

with open('resource\\general\\countries.json', 'r') as countries_json:
    country = json.load(countries_json)

with open('resource\\dota2\\dota2_ranks.json', 'r') as dota2_ranks_json:
    rank = json.load(dota2_ranks_json)

with open('resource\\general\\tournaments.json', 'r') as tournaments_json:
    tournaments = json.load(tournaments_json)

with open('resource\\general\\information.json', 'r') as information_json:
    info = json.load(information_json)




#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start // Processing /start command
@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    
    await message.answer("""üá∫üá∏English
Hello, OpenTrackerBot is a bot created for conveniently tracking matches in Dota, as well as viewing statistics of other players.
Let's set up the bot!
\n
üá∑üá∫Russian
–ü—Ä–∏–≤–µ—Ç, OpenTrackerBot - –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π –≤ –¥–æ—Ç–µ, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞!""",
parse_mode='HTML', disable_web_page_preview=True)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help // Processing /help command
@router.message(Command('help'))
async def command_help_handler(message: Message) -> None:
  await message.answer('''/findmatch - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –ø–æ –µ–≥–æ ID
/findplayer - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ –ø–æ –µ–≥–æ ID
''')


@router.message(Command('info'))
async def command_info(message: Message) -> None:
    await message.answer(f'Version: {info['info']['version']}')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /findmatch // Processing /findmatch command
@router.message(Command('findmatch'))
async def command_findmatch_handler(message, state: FSMContext):
  await state.set_state(Form.match_id)
  await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞")

@router.message(Form.match_id)
async def get_match_data(message, state: FSMContext):
  await state.update_data(match_id=message.text)
  try:
    resp = requests.get(f'https://api.opendota.com/api/matches/{message.text}') # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä opendota.com // Sending a request to the opendota.com server
    response = resp.json() # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ json-—Ñ–∞–π–ª–∞ // Collecting info in json-file format

    with open(f'{message.text}.json', 'w') as outfile:
      json.dump(response, outfile) #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Saving received json-file

    with open(f'{message.text}.json', 'r') as outfile:
      result = json.load(outfile) #–ß—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Reading received json-file

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ // Processing and saving match results into variables
    data_win = result["radiant_win"]
    data_duration = str(datetime.timedelta(seconds=result["duration"]))
    data_radiant_score = result["radiant_score"]
    data_dire_score = result["dire_score"]
    #–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö // Creating empty lists to save player information
    data_players_radiant = []
    data_players_dire = []


    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π // Processing information about players, saving to lists in the form of dictionaries
    for elem_result in result["players"]:
      if elem_result.get("team_number") == 0: #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–ª —Å–≤–µ—Ç–∞ // If the player is on the radiant side
        players_info = dict()
        for elem_heroes in heroes["heroes"]:
          if str(elem_result.get("hero_id")) == elem_heroes["hero_id"]:
            players_info['hero'] = elem_heroes.get("hero_name")
          else:
            pass
        players_info['kills'] = elem_result.get("kills")
        players_info['deaths'] = elem_result.get("deaths")
        players_info['assists'] = elem_result.get("assists")
        data_players_radiant.append(players_info)
      elif elem_result.get("team_number") == 1: #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–ª —Ç—å–º—ã // If the player is on the dire side
        players_info = dict()
        for elem_heroes in heroes["heroes"]:
          if str(elem_result.get("hero_id")) == elem_heroes["hero_id"]:
            players_info['hero'] = elem_heroes.get("hero_name")
          else:
            pass
        players_info['kills'] = elem_result.get("kills")
        players_info['deaths'] = elem_result.get("deaths")
        players_info['assists'] = elem_result.get("assists")
        data_players_dire.append(players_info)
      else:
        pass

    

    #–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ // Bot sending a message with information about a match
    if data_win: #–ü–æ–±–µ–¥–∞ —Å–∏–ª —Å–≤–µ—Ç–∞ // Radiant match-win 
      await message.answer(f'''üèÜ–°–∏–ª—ã —Å–≤–µ—Ç–∞ [{data_radiant_score}:{data_dire_score}] –°–∏–ª—ã —Ç—å–º—ã 
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data_duration}\n
üèÜ–°–∏–ª—ã —Å–≤–µ—Ç–∞:\n
{data_players_radiant[0].get('hero')} - [{data_players_radiant[0].get('kills')}/{data_players_radiant[0].get('deaths')}/{data_players_radiant[0].get('assists')}]
{data_players_radiant[1].get('hero')} - [{data_players_radiant[1].get('kills')}/{data_players_radiant[1].get('deaths')}/{data_players_radiant[1].get('assists')}]
{data_players_radiant[2].get('hero')} - [{data_players_radiant[2].get('kills')}/{data_players_radiant[2].get('deaths')}/{data_players_radiant[2].get('assists')}]
{data_players_radiant[3].get('hero')} - [{data_players_radiant[3].get('kills')}/{data_players_radiant[3].get('deaths')}/{data_players_radiant[3].get('assists')}]
{data_players_radiant[4].get('hero')} - [{data_players_radiant[4].get('kills')}/{data_players_radiant[4].get('deaths')}/{data_players_radiant[4].get('assists')}]

–°–∏–ª—ã —Ç—å–º—ã:\n
{data_players_dire[0].get('hero')} - [{data_players_dire[0].get('kills')}/{data_players_dire[0].get('deaths')}/{data_players_dire[0].get('assists')}]
{data_players_dire[1].get('hero')} - [{data_players_dire[1].get('kills')}/{data_players_dire[1].get('deaths')}/{data_players_dire[1].get('assists')}]
{data_players_dire[2].get('hero')} - [{data_players_dire[2].get('kills')}/{data_players_dire[2].get('deaths')}/{data_players_dire[2].get('assists')}]
{data_players_dire[3].get('hero')} - [{data_players_dire[3].get('kills')}/{data_players_dire[3].get('deaths')}/{data_players_dire[3].get('assists')}]
{data_players_dire[4].get('hero')} - [{data_players_dire[4].get('kills')}/{data_players_dire[4].get('deaths')}/{data_players_dire[4].get('assists')}]
''')
      
    else: ##–ü–æ–±–µ–¥–∞ —Å–∏–ª —Ç—å–º—ã // Dire match-win 
      await message.answer(f'''–°–∏–ª—ã —Å–≤–µ—Ç–∞ [{data_radiant_score}:{data_dire_score}] –°–∏–ª—ã —Ç—å–º—ãüèÜ
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data_duration}
–°–∏–ª—ã —Å–≤–µ—Ç–∞:\n
{data_players_radiant[0].get('hero')} - [{data_players_radiant[0].get('kills')}/{data_players_radiant[0].get('deaths')}/{data_players_radiant[0].get('assists')}]
{data_players_radiant[1].get('hero')} - [{data_players_radiant[1].get('kills')}/{data_players_radiant[1].get('deaths')}/{data_players_radiant[1].get('assists')}]
{data_players_radiant[2].get('hero')} - [{data_players_radiant[2].get('kills')}/{data_players_radiant[2].get('deaths')}/{data_players_radiant[2].get('assists')}]
{data_players_radiant[3].get('hero')} - [{data_players_radiant[3].get('kills')}/{data_players_radiant[3].get('deaths')}/{data_players_radiant[3].get('assists')}]
{data_players_radiant[4].get('hero')} - [{data_players_radiant[4].get('kills')}/{data_players_radiant[4].get('deaths')}/{data_players_radiant[4].get('assists')}]\n
üèÜ–°–∏–ª—ã —Ç—å–º—ã:\n
{data_players_dire[0].get('hero')} - [{data_players_dire[0].get('kills')}/{data_players_dire[0].get('deaths')}/{data_players_dire[0].get('assists')}]
{data_players_dire[1].get('hero')} - [{data_players_dire[1].get('kills')}/{data_players_dire[1].get('deaths')}/{data_players_dire[1].get('assists')}]
{data_players_dire[2].get('hero')} - [{data_players_dire[2].get('kills')}/{data_players_dire[2].get('deaths')}/{data_players_dire[2].get('assists')}]
{data_players_dire[3].get('hero')} - [{data_players_dire[3].get('kills')}/{data_players_dire[3].get('deaths')}/{data_players_dire[3].get('assists')}]
{data_players_dire[4].get('hero')} - [{data_players_dire[4].get('kills')}/{data_players_dire[4].get('deaths')}/{data_players_dire[4].get('assists')}]
''')
      
    os.remove(f'{message.text}.json') #–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Deleting a previously received json file

  except:
    pass


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /findplayer –∏ /findaccount // Handling the /findplayer and /findaccount commands
@router.message(Command('findplayer'))
async def command_findplayer_handler(message, state: FSMContext):
  await state.set_state(Form.account_id)
  await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞')

@router.message(Form.account_id)
async def get_account_data(message, state: FSMContext):
  await state.update_data(account_id=message.text)
  try:
    resp = requests.get(f'https://api.opendota.com/api/players/{message.text}') #–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ opendota.com API // Sending a request to the opendota.com API
    response = resp.json()

    with open(f'{message.text}.json', 'w') as outfile:
      json.dump(response, outfile) #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Saving received json-file

    with open(f'{message.text}.json', 'r') as outfile:
      result = json.load(outfile) #–ß—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Reading received json-file

    
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ // Processing and storing information about the player into variables
    data_account_id = result['profile']['account_id']
    data_steamid = result['profile']['steamid']
    data_personaname = result['profile']['personaname']
    data_avatarfull = result['profile']['avatarfull']
    #–ü—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ None, —Ç.–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –±—É–¥–µ–º –¥–∞–ª–µ–µ // We assign the value None, because we will fill it in later
    data_country = None
    data_country_emoji = None
    data_player_rank = None


    for elem in country["countries"]: #–°—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å json —Ñ–∞–π–ª–∞ "countries" // Reading elements from the json file "countries"
      if result["profile"]["loccountrycode"] == elem["country_iso_alpha2"]: #–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ API —Å –Ω–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º // Compare the country code received by the API request with our list
        data_country = elem.get("country") #–ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ –Ω–∞–∑–Ω–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é // If the country code matches, then assign the country name to the variable
      else:
        pass
  
    for elem in rank["ranks"]: #–î–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ // We do the same thing, but now to gain rank
      if str(result["rank_tier"]) == elem["rank_id"]:
        data_player_rank = elem.get("rank_name")
      else:
        pass


    #–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º // The bot sends a message with the result
    if data_country == None: #–ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ —Å—Ç–∏–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –æ—Ç–≤–µ—Ç // If the country is not on Steam, then we do not add it to the answer.
      await message.answer_photo(data_avatarfull, caption=f'''ID –∞–∫–∫–∞—É–Ω—Ç–∞: {data_account_id}\nSteam ID: {data_steamid}\n–ù–∏–∫–Ω–µ–π–º: {data_personaname}
–†–∞–Ω–≥: {data_player_rank}''')
    else:
      await message.answer_photo(data_avatarfull, caption=f'''ID –∞–∫–∫–∞—É–Ω—Ç–∞: {data_account_id}\nSteam ID: {data_steamid}\n–ù–∏–∫–Ω–µ–π–º: {data_personaname}
–°—Ç—Ä–∞–Ω–∞: {data_country}
–†–∞–Ω–≥: {data_player_rank}''')



    os.remove(f'{message.text}.json') #–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Deleting a previously received json file

  except:
    pass

@router.message(Command('profile'))
async def command_profile(message):
    user_profile = {}
    connection = sqlite3.connect('main.db')
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM users')
    users_info = cursor.fetchall()

    connection.commit()
    connection.close()

    for user in users_info:
        user_profile['id'] = user[0]
        user_profile['predictions_count'] = user[2]
        user_profile['predictions_correct'] = user[3]
        user_profile['predictions_incorrect'] = user[4]
        if user[2] != 0 and user[3] != 0:
            user_profile['predictions_winrate'] =  round(user[3]/user[2]*100, 2)
        else:
            user_profile['predictions_winrate'] = 0
        user_profile['predictions_score'] = user[5]


    await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\nOpenTracker ID: {user_profile['id']}\n–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {user_profile['predictions_count']}\n–í–µ—Ä–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: {user_profile['predictions_correct']}\n–ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: {user_profile['predictions_incorrect']}\n–ü—Ä–æ—Ü–µ–Ω—Ç —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {user_profile['predictions_winrate']}%\nOpenTracker Score: {user_profile['predictions_score']}")


@router.message(Command('cpredict'))
async def tournament_list(message):
    kb = []

    connection = sqlite3.connect('main.db')
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM tournaments')
    tournament_info = cursor.fetchall()

    connection.commit()
    connection.close()

    for tournament in tournament_info:
        if tournament[2] == "Live" or tournament[2] == "Upcoming":
            kb.append([InlineKeyboardButton(text=f"{tournament[1]}", callback_data=f"trn.predict_{tournament[1].replace(' ', '_')}")])
        else:
            pass
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    if kb != []:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã:", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")


@router.message(Command('closematch'))
async def tournament_list(message):
    if str(message.from_user.id) in os.getenv('ADMINS'):
        kb = []

        connection = sqlite3.connect('main.db')
        cursor = connection.cursor()

        cursor.execute('SELECT * FROM tournaments')
        tournament_info = cursor.fetchall()

        connection.commit()
        connection.close()

        for tournament in tournament_info:
            if tournament[2] == "Live" or tournament[2] == "Upcoming":
                kb.append([InlineKeyboardButton(text=f"{tournament[1]}", callback_data=f"trn.close_{tournament[1].replace(' ', '_')}")])
            else:
                pass
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        if kb != []:
            await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –º–∞—Ç—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    else:
       pass


@router.message(Command('closepredicts'))
async def tournament_list(message):
    if str(message.from_user.id) in os.getenv('ADMINS'):
        kb = []

        connection = sqlite3.connect('main.db')
        cursor = connection.cursor()

        cursor.execute('SELECT * FROM tournaments')
        tournament_info = cursor.fetchall()

        connection.commit()
        connection.close()

        for tournament in tournament_info:
            if tournament[2] == "Live" or tournament[2] == "Upcoming":
                kb.append([InlineKeyboardButton(text=f"{tournament[1]}", callback_data=f"trn.pred.close_{tournament[1].replace(' ', '_')}")])
            else:
                pass
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        if kb != []:
            await message.answer("–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    else:
       pass


@router.callback_query()
async def matches_list(callback: CallbackQuery):
    kb = []
    match_info = {}

    connection = sqlite3.connect('main.db')
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM tournaments')
    tournament_info = cursor.fetchall()
    cursor.execute('SELECT * FROM matches')
    matches_info = cursor.fetchall()
    cursor.execute('SELECT * FROM predicts')
    predicts_info = cursor.fetchall()
    cursor.execute('SELECT * FROM users')
    users_info = cursor.fetchall()

    connection.commit()
    connection.close()


    if callback.data.startswith('trn.predict'):
        for matches in matches_info:
            if callback.data.replace('_', ' ') == f'trn.predict_{matches[1]}'.replace('_', ' '):
                if matches[6] == "Upcoming":
                    if (callback.from_user.id, matches[0], 0) in predicts_info or (callback.from_user.id, matches[0], 1) in predicts_info:
                        pass
                    else:
                        kb.append([InlineKeyboardButton(text=f"{matches[2]}"+ " - "+f"{matches[3]}", callback_data=f"match.predict_{matches[0]}")])
                else:
                    pass
            else:
                pass
        else:
            pass

        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        if kb != []:
            await callback.message.edit_text('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', reply_markup=keyboard)
        else:
            await callback.message.edit_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π')


    elif callback.data.startswith('match.predict'):
        for matches in matches_info:
            if callback.data == f"match.predict_{matches[0]}":
                kb.append([InlineKeyboardButton(text=f"{matches[2]}", callback_data=f"pred_{matches[0]}_a")])
                kb.append([InlineKeyboardButton(text=f"{matches[3]}", callback_data=f"pred_{matches[0]}_b")])
                match_info['tournament_name'] = matches[1]
                match_info['team_a'] = matches[2]
                match_info['team_b'] = matches[3]
                match_info['time'] = matches[4]
                match_info['type'] = matches[5]
                    
            else:
                pass
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:\n–¢—É—Ä–Ω–∏—Ä: {match_info['tournament_name']}\n{match_info['team_a']} - {match_info['team_b']}\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {match_info['time']}\n–¢–∏–ø –º–∞—Ç—á–∞: {match_info['type']}',
                                         reply_markup=keyboard)


    elif callback.data.startswith('pred'):
        for matches in matches_info:
            if callback.data == f"pred_{matches[0]}_a":
                kb.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"cpred_{matches[0]}_a_yes")])
                kb.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cpred_{matches[0]}_a_no")])
                match_info['tournament_name'] = matches[1]
                match_info['team_a'] = matches[2]
                match_info['team_b'] = matches[3]
                match_info['time'] = matches[4]
                match_info['type'] = matches[5]
                keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
                await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã {match_info['team_a']}?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å',
                                                     reply_markup=keyboard)
            elif callback.data == f"pred_{matches[0]}_b":
                kb.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"cpred_{matches[0]}_b_yes")])
                kb.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cpred_{matches[0]}_b_no")])
                match_info['tournament_name'] = matches[1]
                match_info['team_a'] = matches[2]
                match_info['team_b'] = matches[3]
                match_info['time'] = matches[4]
                match_info['type'] = matches[5]
                keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
                await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã {match_info['team_b']}?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å',
                                                 reply_markup=keyboard)
            else:
                pass
            
                    
    elif callback.data.startswith('cpred'):
        for matches in matches_info:
            if callback.data == f"cpred_{matches[0]}_a_yes":
                match_info['tournament_name'] = matches[1]
                match_info['team_a'] = 0
                match_info['match_id'] = matches[0]

                connection = sqlite3.connect('main.db')
                cursor = connection.cursor()

                cursor.execute('INSERT INTO predicts (tid, match_id, predict) VALUES (?, ?, ?)', (callback.from_user.id, match_info['match_id'], match_info['team_a']))
                cursor.execute('UPDATE users SET predictions_count = predictions_count + ? WHERE tid == ?', (1, callback.from_user.id))
                
                connection.commit()
                connection.close()

                await callback.answer('–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!')
                await callback.message.delete()

            elif callback.data == f"cpred_{matches[0]}_b_yes":
                match_info['tournament_name'] = matches[1]
                match_info['team_b'] = 1
                match_info['match_id'] = matches[0]

                connection = sqlite3.connect('main.db')
                cursor = connection.cursor()

                cursor.execute('INSERT INTO predicts (tid, match_id, predict) VALUES (?, ?, ?)', (callback.from_user.id, match_info['match_id'], match_info['team_b']))
                cursor.execute('UPDATE users SET predictions_count = predictions_count + ? WHERE tid == ?', (1, callback.from_user.id))

                connection.commit()
                connection.close()

                await callback.answer('–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!')
                await callback.message.delete()

            elif callback.data == f"cpred_{matches[0]}_a_no":
                await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await callback.message.delete()

            elif callback.data == f"cpred_{matches[0]}_b_no":
                await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await callback.message.delete()


    elif callback.data.startswith('trn.close'):
        for matches in matches_info:
            if callback.data.replace('_', ' ') == f'trn.close_{matches[1]}'.replace('_', ' '):
                if matches[6] == "Upcoming" or matches[6] == "Live":
                    kb.append([InlineKeyboardButton(text=f"{matches[2]}"+ " - "+f"{matches[3]}", callback_data=f"match.close_{matches[0]}")])
                else:
                    pass
            else:
                pass
        else:
            pass

        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        if kb != []:
            await callback.message.edit_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–∞—Ç—á–∏:', reply_markup=keyboard)
        else:
            await callback.message.edit_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è')


    elif callback.data.startswith('match.close'):
        for matches in matches_info:
            if callback.data == f"match.close_{matches[0]}":
                kb.append([InlineKeyboardButton(text=f"{matches[2]}", callback_data=f"match.win_{matches[0]}_a")])
                kb.append([InlineKeyboardButton(text=f"{matches[3]}", callback_data=f"match.win_{matches[0]}_b")])
                match_info['tournament_name'] = matches[1]
                match_info['team_a'] = matches[2]
                match_info['team_b'] = matches[3]
                match_info['time'] = matches[4]
                match_info['type'] = matches[5]
                    
            else:
                pass
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞', reply_markup=keyboard)
    
    elif callback.data.startswith('match.win'):
        for matches in matches_info:
            if callback.data == f"match.win_{matches[0]}_a":
                connection = sqlite3.connect('main.db')
                cursor = connection.cursor()

                cursor.execute('UPDATE matches SET (team_a_win, team_b_win) = (?, ?) WHERE match_id == ?', (1, 0, matches[0]))
                cursor.execute('UPDATE matches SET match_status = ? WHERE match_id == ?', ("Finished", matches[0]))

                if (callback.from_user.id, matches[0], 0) in predicts_info:
                    cursor.execute('UPDATE users SET (predictions_correct, predictions_score) = (predictions_correct + ?, predictions_score + ?) WHERE tid == ?', (1, matches[9], callback.from_user.id))

                elif (callback.from_user.id, matches[0], 1) in predicts_info:
                    cursor.execute('UPDATE users SET predictions_incorrect = predictions_incorrect + ? WHERE tid == ?', (1, callback.from_user.id))

                else:
                    pass

                connection.commit()
                connection.close()

            elif callback.data == f"match.win_{matches[0]}_b":

                connection = sqlite3.connect('main.db')
                cursor = connection.cursor()

                cursor.execute('UPDATE matches SET (team_a_win, team_b_win) = (?, ?) WHERE match_id == ?', (0, 1, matches[0]))
                cursor.execute('UPDATE matches SET match_status = ? WHERE match_id == ?', ("Finished", matches[0]))
                
                if (callback.from_user.id, matches[0], 1) in predicts_info:
                    cursor.execute('UPDATE users SET (predictions_correct, predictions_score) = (predictions_correct + ?, predictions_score + ?) WHERE tid == ?', (1, matches[9], callback.from_user.id))

                elif (callback.from_user.id, matches[0], 0) in predicts_info:
                    cursor.execute('UPDATE users SET predictions_incorrect = predictions_incorrect + ? WHERE tid == ?', (1, callback.from_user.id))

                else:
                    pass

                connection.commit()
                connection.close()
                
            await callback.answer('–ú–∞—Ç—á –∑–∞–∫—Ä—ã—Ç')
            

    
    elif callback.data.startswith('trn.pred.close'):
        for matches in matches_info:
            if callback.data.replace('_', ' ') == f'trn.pred.close_{matches[1]}'.replace('_', ' '):
                if matches[6] == "Upcoming":
                    kb.append([InlineKeyboardButton(text=f"{matches[2]}"+ " - "+f"{matches[3]}", callback_data=f"match.pred.close_{matches[0]}")])
                else:
                    pass
            else:
                pass
        else:
            pass
    
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        if kb != []:
            await callback.message.edit_text('–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', reply_markup=keyboard)
        else:
            await callback.message.edit_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π')
 

    elif callback.data.startswith('match.pred.close'):
        for matches in matches_info:
            if callback.data == f"match.pred.close_{matches[0]}":
                connection = sqlite3.connect('main.db')
                cursor = connection.cursor()

                cursor.execute(f'UPDATE matches SET match_status = "Live" WHERE match_id == {matches[0]}')

                connection.commit()
                connection.close()

            await callback.answer('–ú–∞—Ç—á –∑–∞–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.')



async def main():

    dp = Dispatcher()

    dp.include_router(router)

    # Start event dispatching
    await dp.start_polling(bot)




if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())